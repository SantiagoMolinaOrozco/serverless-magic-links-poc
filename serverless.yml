service: magic-links

frameworkVersion: '2'

# Attaching handlers
functions:
  # 0. Initiates sign-in
  login:
    handler: api/login.handler
    events:
      - http:
          path: /login
          method: post
          cors: true

  # 1. Define auth challenge (letting Cognito know that we have a custom challenge)
  define-auth-challenge:
    handler: api/define-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: DefineAuthChallenge
          existing: true

  # 2. Create the actual auth challenge
  create-auth-challenge:
    handler: api/create-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: CreateAuthChallenge
          existing: true

  # 3. Verify auth challenge
  verify-auth-challenge:
    handler: api/verify-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: VerifyAuthChallengeResponse
          existing: true

  # 4. Pre sign-up autoconfirm user
  pre-sign-up:
    handler: api/autoconfirm-user.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PreSignUp
          existing: true

# Default serverless stuff
provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  stage: ${self:custom.stage}
  environment:
    URL: {"Fn::Join": ["", ["https://", {"Ref": "ApiGatewayRestApi"}, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"]]}
    USER_POOL_ID: "$USER_POOL_ID"

plugins:
  - serverless-apigateway-service-proxy

package:
  exclude:
    - node_modules/**

custom:
  stage: ${opt:stage, 'dev'}
  userPoolName: $USER_POOL_NAME
  webBucketName: sls-magic-link-web-${self:custom.stage}
